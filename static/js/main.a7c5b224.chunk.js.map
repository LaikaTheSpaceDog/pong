{"version":3,"sources":["data/initial.js","data/reducer.js","store.js","components/Landing/Landing.js","components/Home/Home.js","components/Home/index.js","data/actions.js","components/Card/Card.js","components/Games/Games.js","components/Games/index.js","components/Winner/Winner.js","components/Winner/index.js","components/App/App.js","components/App/index.js","serviceWorker.js","index.js"],"names":["initial","players","shuffledPlayers","games","winners","round","submitted","finished","winningScore","randomPairs","shuffle","output","i","n","length","push","player1","player2","array","m","Math","floor","random","t","reducer","state","action","type","submitPlayers","generateFirstRound","winner","nextRound","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","Landing","className","to","Home","props","originalName","name","playerArray","includes","powerOf2MoreThan4","playerName","playersError","hovering","handlePlayer","bind","handleSubmit","handleAddPlayer","handleClear","handleFilter","handleHover","handleWinning","e","this","setState","currentTarget","value","preventDefault","handleAdd","handleTeams","setTimeout","arr","ind","filter","_","index","num","noZero","onSubmit","onChange","onClick","min","max","map","item","key","onMouseEnter","Component","connect","dispatch","data","Card","winnerName","handlePlayer1","handlePlayer2","handleReset","score","player","player1Name","player2Name","prevProps","id","game","Games","handleNextRound","whatRound","Winner","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7c5b224.chunk.js","sourcesContent":["const initial = {\n    players: [],\n    shuffledPlayers: [],\n    games: [],\n    winners: [],\n    round: 1,\n    submitted: false,\n    finished: false,\n    winningScore: 21\n}\n\nexport default initial;","import initial from './initial';\n\n// Given an array of players, return an array of random pairs\nconst randomPairs = players => {\n    shuffle( players );\n    var output = [];\n    for( var i = 0, n = players.length;  i < n;  i += 2 ) {\n        output.push({ player1: players[i], player2: players[i+1] });\n    }\n    return output;\n}\n\n// Shuffle an array in place using the Fisher-Yates algorithm,\n// adapted from http://bost.ocks.org/mike/shuffle/\nconst shuffle = array => {\n    for( var m = array.length;  m; ) {\n        var i = Math.floor( Math.random() * m-- );\n        var t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n    return array;\n}\n\nconst submitPlayers = (state, { players }) => ({\n    ...state,\n    players: players,\n    submitted: true\n})\n\nconst generateFirstRound = (state, { shuffledPlayers, winningScore }) => ({\n    ...state, \n    games: randomPairs(shuffledPlayers),\n    winningScore: winningScore\n})\n\nconst reset = () => ({\n    ...initial\n});\n\nconst winner = (state, { winner }) => ({\n    ...state,\n    winners: [\n        ...state.winners,\n        winner\n    ]\n})\n\nconst finished = (state) => ({\n    ...state,\n    finished: state.winners.length === 1 && state.games.length === 1\n})\n\n\nconst nextRound = state => ({\n    ...state,\n    players: state.winners,\n    winners: [],\n    round: state.round + 1,\n    games: randomPairs(state.winners),\n})\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"ADD_PLAYERS\": return submitPlayers(state, action);\n        case \"CREATE_GAMES\": return generateFirstRound(state, action);\n        case \"RESET\": return reset();\n        case \"WINNER\": return finished(winner(state, action));\n        case \"NEXT\": return nextRound(state);\n        default: return state;\n    }\n};\n\nexport default reducer;","import { createStore, compose } from \"redux\";\nimport reducer from \"./data/reducer\";\nimport initial from \"./data/initial\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers = \n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reducer, \n  initial,\n  composeEnhancers(persistState())\n);\n\nexport default store;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Landing = () => {\n\n    return(\n        <>\n            <h1 className=\"heading landing\">(Ping)-Pong</h1>\n            <section className=\"cardLanding here\">\n                <div className=\"rightBar\"></div>\n                <div className=\"leftBar\"></div>\n                <div className=\"ball\"></div>\n            </section>\n            <div className=\"centerButton\">\n                <Link className=\"button\" to=\"/home\">Click to Enter</Link>\n            </div>\n        </>\n    );\n\n}\n\nexport default Landing;","import React, { Component } from \"react\";\n\nclass Home extends Component {\n    \n    constructor (props) {\n        super(props);\n\n        this.state = {\n            playerName: \"\",\n            playerArray: [],\n            shuffledPlayers: [],\n            playersError: false,\n            hovering: 0,\n            originalName: 2, // set initially to 2 as ternary below checking for true/false\n            winningScore: props.winningScore \n        };\n\n        this.handlePlayer = this.handlePlayer.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleAddPlayer = this.handleAddPlayer.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleFilter = this.handleFilter.bind(this);\n        this.handleHover = this.handleHover.bind(this);\n        this.handleWinning = this.handleWinning.bind(this);\n    };\n\n    handlePlayer(e){\n        this.setState({ playerName: e.currentTarget.value });\n    };\n\n    originalName = (name) => {\n        return !this.state.playerArray.includes(name);\n    }\n\n    handleAddPlayer(){\n        if(this.originalName(this.state.playerName)){\n            this.setState({ \n                playerArray: [\n                    ...this.state.playerArray,\n                        this.state.playerName\n                ],\n                playerName: \"\",\n                shuffledPlayers: [\n                    ...this.state.shuffledPlayers,\n                        this.state.playerName,\n                ],\n                originalName: true\n            });\n        } else {\n            this.setState({\n                originalName: false,\n                playerName: \"\"\n            })\n        }\n    };\n\n    // Checks whether the number passed in is 4 or greater and also a power of 2 (e.g. 4, 8, 16, 32...)\n    powerOf2MoreThan4 = n => {\n        return n < 4 ? false : (\n        n && (n & (n - 1)) === 0);\n    }\n    \n    handleSubmit(e){\n        e.preventDefault();\n        if(this.powerOf2MoreThan4(this.state.playerArray.length)){\n            this.props.handleAdd({...this.state});\n            this.props.handleTeams({...this.state});  \n        } else {\n            this.setState({\n                ...this.state,\n                playersError: true\n            });\n            // Sets playersError back to false after 3 seconds so that if user enters wrong number of players again, the warning message below will flash agaim.\n            setTimeout(() => {\n                this.setState({\n                    ...this.state,\n                    playersError: false\n                });\n            }, 3000);\n        };\n    }\n\n    handleClear(){\n        this.setState({\n            ...this.state,\n            playerArray: [],\n            shuffledPlayers: []\n        })\n    }\n\n    filter(arr, ind){\n        return arr.filter((_, index) => index !== ind );\n    }\n\n    handleHover(e){\n        this.setState({...this.state, hovering: + e.currentTarget.value})\n    }\n    \n    handleFilter(e){\n        let index = this.state.hovering;\n        this.setState({\n            ...this.state,\n            playerArray: this.filter(this.state.playerArray, index),\n            shuffledPlayers: this.filter(this.state.shuffledPlayers, index)\n        })\n    }\n\n    // Prevents default behaviour of number input showing '0' when user tries to clear input field\n    noZero(num){\n        return num === 0 ? \"\" : num;\n    }\n\n    handleWinning(e){\n        this.setState({\n            ...this.state,\n            winningScore: this.noZero(+ e.currentTarget.value)\n        })\n    }\n    \n    render(){\n        let { playersError } = this.state;\n        \n        return (\n            <article className=\"body\">\n                <h1 className=\"heading\">(Ping)-Pong</h1>\n                <p className=\"plainText\">Let's play Pong (or ping-pong...)! To create your tournament, please enter the names of all players below. <span className={ playersError ? \"plainText blinking\" : \"plainText\" }>You will need a minimum of 4 players and the total number of players must be a power of 2 e.g. 4, 8, 16, 32...</span></p>\n                <section className=\"players\">\n                    <form className=\"form\" onSubmit={ this.handleSubmit }>\n                        <div className=\"playerForm\">\n                            <label className=\"plainText\">Enter Name:</label>\n                            <input type=\"text\" className=\"input\" onChange={ this.handlePlayer } value={ this.state.playerName }/>\n                            <button className=\"button\" onClick={ this.handleAddPlayer } type=\"button\">Add</button>\n                            {this.state.originalName ? null : <p className=\"plainText warn\">Name already taken!</p>}\n                            <label className=\"plainText\">Winning Score:</label>\n                            <input type=\"number\" min=\"1\" max=\"100\" className=\"input score\" onChange={ this.handleWinning } value={ this.state.winningScore }/>\n                        </div>\n                        {this.state.playerArray.length === 0 ? null :               \n                            <>\n                                <ul className=\"list\">\n                                    <p className=\"listTitle\">Players:</p>\n                                    {this.state.playerArray.map((item, index) => (\n                                        <span className=\"listLine\" key={ index }><li className=\"listItem\">{ item }</li><button type=\"button\" className=\"xButton\" index={ index } value={ index } onMouseEnter={ this.handleHover } onClick={ this.handleFilter } >x</button></span>\n                                    ))}\n                                    <div className=\"centerButton\">\n                                        <button className=\"button\" onClick={ this.handleClear }>Clear</button>\n                                    </div>\n                                </ul>\n                                <div className=\"break\"></div>\n                                <button className=\"button start\" type=\"submit\">Start!</button>\n                            </>\n                        }\n                    </form>\n                </section>\n            </article>\n        );\n    }\n}\n\nexport default Home;","import { connect } from \"react-redux\";\nimport Home from \"./Home\";\nimport { addPlayer, createTeams } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n    return {\n        players: state.players,\n        winningScore: state.winningScore\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleAdd: (data) => dispatch(addPlayer(data)),\n        handleTeams: (data) => dispatch(createTeams(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps )(Home);","export const addPlayer = ({ playerArray }) => {\n    return {\n        type: \"ADD_PLAYERS\",\n        players: playerArray\n    };\n};\n\nexport const createTeams = ({ playerArray, shuffledPlayers, winningScore }) => {\n    return {\n        type: \"CREATE_GAMES\",\n        players: playerArray,\n        shuffledPlayers: shuffledPlayers,\n        winningScore: winningScore\n    };\n};\n\nexport const reset = () => {\n    return {\n        type: \"RESET\"\n    };\n};\n\nexport const submitWinner = ({ winnerName }) => {\n    return {\n        type: \"WINNER\",\n        winner: winnerName\n    };\n};\n\nexport const nextRound = () => {\n    return {\n        type: \"NEXT\"\n    };\n};","import React, { Component } from \"react\";\n\nclass Card extends Component {\n    \n    constructor (props) {\n        super(props);\n\n        this.state = {\n            player1: 0,\n            player2: 0,\n            winner: 0,\n            winnerName: \"\",\n            submitted: false,\n            winningScore: props.winningScore\n        };\n\n        this.handlePlayer1 = this.handlePlayer1.bind(this);\n        this.handlePlayer2 = this.handlePlayer2.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n\n    };\n\n    winner(score, player){\n        return score >= this.state.winningScore ? player : 0;\n    }\n\n    score(num){\n        if(num < this.state.winningScore){\n            return num += 1;\n        } else {\n            return this.state.winningScore;\n        }\n    }\n    \n    handlePlayer1(){\n        let player1 = this.state.player1;\n        this.setState({\n            ...this.state,\n            player1: this.score(player1),\n            winner: this.winner(player1 + 1, 1),\n            winnerName: this.winner(player1 + 1, this.props.player1Name)\n        });\n    }\n\n    handlePlayer2(){\n        let player2 = this.state.player2;\n        this.setState({\n            ...this.state,\n            player2: this.score(player2),\n            winner: this.winner(player2 + 1, 2),\n            winnerName: this.winner(player2 + 1, this.props.player2Name)\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        this.props.handleSubmit({...this.state});\n        this.setState({\n            ...this.state,\n            submitted: true\n        })\n    }\n\n    handleReset(){\n        this.setState({\n            ...this.state,\n            player1: 0,\n            player2: 0\n        })\n    }\n\n    // Checks to see if the id property has changed - if yes, resets scores, winner, winnerName and submitted to original values\n    componentDidUpdate(prevProps){\n        if(this.props.id !== prevProps.id){\n            this.setState({\n                ...this.state,\n                submitted: false,\n                player1: 0,\n                player2: 0,\n                winner: 0,\n                winnerName: \"\"\n            })\n        }\n    }\n    \n    render(){\n        \n        let { player1Name, player2Name, game, winners } = this.props;\n        let { player1, player2, winner, submitted } = this.state;\n\n        return (\n            <>\n                <article className=\"fullCard\">\n                    { winners.includes(player1Name || player2Name) ? <p className=\"plainText centerText\">Game { game +1 } Submitted</p> : \n                        <>\n                            <header className=\"cardHeader\">\n                                <h1 className=\"gameHeader\">Game { game + 1 }</h1>\n                            </header>\n                            <section className=\"cardScore\">\n                                <section className=\"scoreOdd\">\n                                    <button className=\"button\" onClick={ this.handlePlayer1 }>+</button>\n                                    <p className=\"player\">{ player1Name}</p>\n                                </section>\n                                <section className=\"card here\">\n                                    <p className=\"score1\">{ player1 }</p>\n                                    <p className=\"score2\">{ player2 }</p>\n                                        <div className=\"bar bar1\"></div>\n                                        <div className=\"bar bar2\"></div>\n                                </section>\n                                <section className=\"scoreEven\">\n                                    <p className=\"player\">{ player2Name }</p>\n                                    <button className=\"button\" onClick={ this.handlePlayer2 }>+</button>\n                                </section>\n                            </section>\n                            <div className=\"centerButton\">\n                                { winner === 0 ? <button className=\"button\" type=\"button\" onClick={ this.handleReset }>Reset</button> : (\n                                    submitted !== true ? \n                                    <>\n                                        <p className=\"plainText\">{ `${winner === 1 ? player1Name : player2Name} Wins!` }</p>\n                                        <button className=\"button win\" type=\"button\" onClick={ this.handleReset }>Reset</button>\n                                        <button className=\"button win\" onClick={ this.handleSubmit } type=\"submit\">Submit</button>\n                                    </> :\n                                    <p className=\"plainText\">Scores submitted!</p>\n                                )}\n                            </div>\n                        </>\n                    }\n                </article>\n            </>\n        );\n    }\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"../Card/Card\";\n\nconst whatRound = (games, round) => {\n    return(\n    games.length === 1 ? \"Final\" :\n    games.length === 2 ? \"Semi Finals\" :\n    games.length === 4 ? \"Quarter Finals\" : `Round ${round}`\n    );\n}\n\nconst Games = ({ games, handleReset, handleSubmit, handleNextRound, winners, round, winningScore }) => {\n    \n    return (\n        <>\n            <h1 className=\"heading\">{ whatRound(games, round) }</h1>\n                <section className=\"cardGroup\">\n                    { games.map((item, index) => (\n                        <Card winningScore= { winningScore } handleSubmit={ handleSubmit } key={ index } game={ index } id={ `${index}${item.player1}${item.player2}` } player1Name={ item.player1 } player2Name={ item.player2 } winners={ winners } />\n                    ))}\n                </section>\n            <div className=\"centerButton\">\n                { winners.length === games.length ?  \n                    <button className=\"button next\" onClick={ handleNextRound }>Next Round</button>\n                : null }\n                <button className=\"button reset\" onClick={ handleReset }>New Competition</button>\n            </div>\n        </>\n    );\n}   \n\nexport default Games;","import { connect } from \"react-redux\";\nimport Games from \"./Games\";\nimport { reset, submitWinner, nextRound } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n    return {\n        players: state.players,\n        games: state.games,\n        round: state.round,\n        winners: state.winners,\n        winningScore: state.winningScore\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleReset: (data) => dispatch(reset(data)),\n        handleSubmit: (data) => dispatch(submitWinner(data)),\n        handleNextRound: (data) => dispatch(nextRound(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps )(Games);","import React from \"react\";\n\nconst Winner = ({ winners, handleReset }) => {\n\n    return(\n        <>\n            <h1 className=\"heading\">Well Done { winners[0] }!</h1>\n            <section className=\"pyro\">\n                <div className=\"before\"></div>\n                <div className=\"after\"></div>\n            </section>\n            <section className=\"centerButton\">\n                <button className=\"button reset\" onClick={ handleReset }>New Competition</button>\n            </section>\n        </>\n    );\n\n}\n\nexport default Winner;","import { connect } from \"react-redux\";\nimport Winner from \"./Winner\";\nimport { reset } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n    return {\n        winners: state.winners\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleReset: (data) => dispatch(reset(data)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Winner);","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport \"../../styles/css/styles.min.css\"\nimport Landing from \"../Landing/Landing\";\nimport Home from \"../Home\";\nimport Games from \"../Games\";\nimport Winner from \"../Winner\";\n\nconst App = ({ submitted, finished }) => (\n  <Router>\n    <Switch>\n      <Route exact path = \"/\">\n        <Landing />\n      </Route>\n      <Route exact path = \"/home\">\n        {\n          submitted ? (\n            finished ? <Winner /> : <Games />\n          )\n          :\n          <Home />\n        }\n      </Route>\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = ({ submitted, finished }) => {\n    return {\n        submitted: submitted,\n        finished: finished\n    };\n};\n\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}